<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>yalungelin</title><link>https://yalungelin.github.io</link><description>Workspace</description><copyright>yalungelin</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://iconic-api.onrender.com/dark/linux</url><title>avatar</title><link>https://yalungelin.github.io</link></image><lastBuildDate>Sun, 06 Jul 2025 12:26:49 +0000</lastBuildDate><managingEditor>yalungelin</managingEditor><ttl>60</ttl><webMaster>yalungelin</webMaster><item><title>WSL子系统问题集合（继续更新）</title><link>https://yalungelin.github.io/post/WSL-zi-xi-tong-wen-ti-ji-he-%EF%BC%88-ji-xu-geng-xin-%EF%BC%89.html</link><description>WSL安装
首先在启用或关闭wwindows功能中启用Linux虚拟化平台等等
![在这里插入图片描述](https://i-blog.csdnimg.cn/direct/660cfae3a173454f82be442c58df479d.png)
在微软商店中安装不同版本的Ubuntu，如果使用深度学习训练，建议使用20.04，别的版本会有显卡软连接问题，后续会提到。</description><guid isPermaLink="true">https://yalungelin.github.io/post/WSL-zi-xi-tong-wen-ti-ji-he-%EF%BC%88-ji-xu-geng-xin-%EF%BC%89.html</guid><pubDate>Sun, 06 Jul 2025 10:28:07 +0000</pubDate></item><item><title>打包PyQt5应用为exe文件</title><link>https://yalungelin.github.io/post/da-bao-PyQt5-ying-yong-wei-exe-wen-jian.html</link><description>安装必要的工具
首先，需要安装PyInstaller：

```c
pip install pyinstaller
```
打包应用程序
**基本打包方法**
打开命令提示符，导航到包含main.py文件的目录
执行打包命令：

```c
pyinstaller --name '工具' --windowed --icon=app_icon.ico main.py
```
参数解释：

--name - 指定生成的exe文件名称
--windowed - 创建没有控制台窗口的GUI应用
--icon - 应用程序图标
**高级打包方法（推荐）**
为了确保所有依赖关系都被正确打包，我建议创建一个规范文件：

 **1.首先生成规范文件：**
 

```c
pyi-makespec --name '工具' --windowed --icon=app_icon.ico main.py
```

 **2. 编辑生成的.spec文件，添加必要的数据文件（如果有样式文件等）：**

```c
# 在datas列表中添加所需的额外文件
a = Analysis(
    ['main.py'],
    pathex=[],
    binaries=[],
    datas=[('style.qss', '.')],  # 添加样式文件
    hiddenimports=[],
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=[],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=None,
    noarchive=False,
)
```
如果在当前环境下，直接运行第三个步骤，忽略第二步。</description><guid isPermaLink="true">https://yalungelin.github.io/post/da-bao-PyQt5-ying-yong-wei-exe-wen-jian.html</guid><pubDate>Sun, 06 Jul 2025 10:21:16 +0000</pubDate></item><item><title>常见服务器阵列（RAID方案）</title><link>https://yalungelin.github.io/post/chang-jian-fu-wu-qi-zhen-lie-%EF%BC%88RAID-fang-an-%EF%BC%89.html</link><description>阵列类型取决于你对以下几个方面的需求权重：

    数据安全性（容错能力）

    读写性能

    可用容量

    管理复杂度
一、常见RAID方案对比（基于4块4TB硬盘）
| RAID类型             | 可用容量 | 容错能力              | 性能       | 是否推荐          |
| ------------------ | ---- | ----------------- | -------- | ------------- |
| RAID 0             | 16TB | 无                 | 最高       | ❌ 不推荐（无容错）    |
| RAID 1+0 (RAID 10) | 8TB  | 可容忍1块每组的硬盘损坏（共2块） | 很好       | ✅ 推荐（性能+安全平衡） |
| RAID 5             | 12TB | 可容忍1块硬盘损坏         | 一般读好、写较慢 | ✅ 推荐（容量+安全折中） |
| RAID 6             | 8TB  | 可容忍2块硬盘损坏         | 写更慢，读好   | ✅ 推荐（极高安全性）   |

二、建议方案
推荐 1：RAID 10（RAID 1+0）

    优点：

        高读写性能。</description><guid isPermaLink="true">https://yalungelin.github.io/post/chang-jian-fu-wu-qi-zhen-lie-%EF%BC%88RAID-fang-an-%EF%BC%89.html</guid><pubDate>Sun, 06 Jul 2025 10:20:42 +0000</pubDate></item><item><title>遥感Tif标签文件处理</title><link>https://yalungelin.github.io/post/yao-gan-Tif-biao-qian-wen-jian-chu-li.html</link><description>@[TOC](标签文件模式)

查看文件模式

```bash
from PIL import Image
Image.MAX_IMAGE_PIXELS = None

img = Image.open(r'E:\tree\z1_labels_palette.tif')
print(img.mode)
```
img.mode 是 'RGB' 就是RGB图；

img.mode 是 'P' 就是调色板图；

img.mode 是 'L' 是灰度图。</description><guid isPermaLink="true">https://yalungelin.github.io/post/yao-gan-Tif-biao-qian-wen-jian-chu-li.html</guid><pubDate>Sun, 06 Jul 2025 10:20:08 +0000</pubDate></item><item><title>CloudCompare使用</title><link>https://yalungelin.github.io/post/CloudCompare-shi-yong.html</link><description>在 CloudCompare 中导出点云时，可以选择 二进制（Binary） 和 ASCII（纯文本） 两种格式，它们的主要区别如下：
1. 数据存储方式

    二进制格式：数据以二进制编码存储，占用空间较小，读写速度快，但不能直接用文本编辑器查看。</description><guid isPermaLink="true">https://yalungelin.github.io/post/CloudCompare-shi-yong.html</guid><pubDate>Sun, 06 Jul 2025 10:19:02 +0000</pubDate></item><item><title>镜像云备份（持续更新）</title><link>https://yalungelin.github.io/post/jing-xiang-yun-bei-fen-%EF%BC%88-chi-xu-geng-xin-%EF%BC%89.html</link><description>阿里：
pip install xxx -i https://mirrors.aliyun.com/pypi/simple
中科大：
pip install xxx -i https://pypi.mirrors.ustc.edu.cn/simple/
豆瓣源：
http://pypi.douban.com/simple/

当更新完.condarc文件时无效，可以查查是不是设置了全局的pip
全局pip一般地址：C:\Users\用户名\AppData\Roaming\pip。</description><guid isPermaLink="true">https://yalungelin.github.io/post/jing-xiang-yun-bei-fen-%EF%BC%88-chi-xu-geng-xin-%EF%BC%89.html</guid><pubDate>Sun, 06 Jul 2025 10:18:21 +0000</pubDate></item><item><title>nerfstudio遇到的问题</title><link>https://yalungelin.github.io/post/nerfstudio-yu-dao-de-wen-ti.html</link><description>![在这里插入图片描述](https://i-blog.csdnimg.cn/direct/28e624756ea94406a14326c0fab8a6c0.png)
sudo apt install ffmpeg
![在这里插入图片描述](https://i-blog.csdnimg.cn/direct/5dbf20bc94b0407aa6f7b3cd4fbbc8af.png)
sudo apt-get install colmap

nerfstudio训练自己的数据
[写的不错的博文](https://blog.csdn.net/Destiny_Di/article/details/136382803)

从只是使用的角度来说，分为三个部分：

1.数据处理
 

```bash
ns-process-data images --data /home/lsl/3Dseg/data/images/2 --output-dir /home/lsl/3Dseg/data/demorobo
```

 2.训练
 

```bash
 ns-train nerfacto --data /home/lsl/3Dseg/data/demorobo
```

  3.导出点云
  
这里导出的命令在可视化面板的可以直接生成，复制即可。</description><guid isPermaLink="true">https://yalungelin.github.io/post/nerfstudio-yu-dao-de-wen-ti.html</guid><pubDate>Sun, 06 Jul 2025 10:17:27 +0000</pubDate></item><item><title>使用ffmpeg对视频抽帧命令</title><link>https://yalungelin.github.io/post/shi-yong-ffmpeg-dui-shi-pin-chou-zheng-ming-ling.html</link><description>[ffmpeg安装教程](https://blog.csdn.net/csdn_yudong/article/details/129182648)
使用 `ffmpeg` 抽帧是个高效的方法，具体命令可以根据你的需求进行调整。</description><guid isPermaLink="true">https://yalungelin.github.io/post/shi-yong-ffmpeg-dui-shi-pin-chou-zheng-ming-ling.html</guid><pubDate>Sun, 06 Jul 2025 10:15:01 +0000</pubDate></item><item><title>Ubuntu 20.04 Nvidia驱动的安装（显卡V100）</title><link>https://yalungelin.github.io/post/Ubuntu%2020.04%20Nvidia-qu-dong-de-an-zhuang-%EF%BC%88-xian-qia-V100%EF%BC%89.html</link><description>


---

## **1. 检查 NVIDIA 内核模块是否加载**
运行：
```bash
lsmod | grep nvidia
```
如果没有输出，说明 **NVIDIA 内核模块未加载**，尝试手动加载：
```bash
sudo modprobe nvidia
nvidia-smi
```
如果 `modprobe` 报错，比如：
```
modprobe: ERROR: could not insert 'nvidia': No such device
```
说明 **驱动与内核不兼容**，请跳到 **步骤 3** 重新安装驱动。</description><guid isPermaLink="true">https://yalungelin.github.io/post/Ubuntu%2020.04%20Nvidia-qu-dong-de-an-zhuang-%EF%BC%88-xian-qia-V100%EF%BC%89.html</guid><pubDate>Sun, 06 Jul 2025 10:14:21 +0000</pubDate></item><item><title>yolov8 一般报错解决方案---持续更新</title><link>https://yalungelin.github.io/post/yolov8%20-yi-ban-bao-cuo-jie-jue-fang-an-----chi-xu-geng-xin.html</link><description>1.Segmentation fault (core dumped)
测试完，是因为pytorch版本对不上导致的问题。</description><guid isPermaLink="true">https://yalungelin.github.io/post/yolov8%20-yi-ban-bao-cuo-jie-jue-fang-an-----chi-xu-geng-xin.html</guid><pubDate>Sun, 06 Jul 2025 10:13:42 +0000</pubDate></item><item><title>Easy-GPU-PV一键安装hyper-v虚拟机</title><link>https://yalungelin.github.io/post/Easy-GPU-PV-yi-jian-an-zhuang-hyper-v-xu-ni-ji.html</link><description>一、hyper-v的开启
我的设备为Win 11 专业版（建议专业版）
家庭版升级专业版，[见此链接](https://github.com/massgravel/Microsoft-Activation-Scripts)
启用或关闭Windows功能
![在这里插入图片描述](https://i-blog.csdnimg.cn/direct/21d04179b51c4002a9b65a20f38d9e61.png)

![在这里插入图片描述](https://i-blog.csdnimg.cn/direct/86e6f0ba6027427eb3b5e11001b64968.png)
二、Easy-GPU-PV下载
下载文件包，[链接](https://github.com/jamesstringerparsec/Easy-GPU-PV)
三、使用
确保您的系统满足先决条件。</description><guid isPermaLink="true">https://yalungelin.github.io/post/Easy-GPU-PV-yi-jian-an-zhuang-hyper-v-xu-ni-ji.html</guid><pubDate>Sun, 06 Jul 2025 10:12:01 +0000</pubDate></item><item><title>Ubuntu 22.0安装MMSegmentation</title><link>https://yalungelin.github.io/post/Ubuntu%2022.0-an-zhuang-MMSegmentation.html</link><description>步骤 1. 创建一个 conda 环境，并激活

conda create --name openmmlab python=3.8 -y
conda activate openmmlab
步骤 2. 安装 PyTorch

安装低版本的pytorch，在继续安装MMSegmentation，才能避免报错。</description><guid isPermaLink="true">https://yalungelin.github.io/post/Ubuntu%2022.0-an-zhuang-MMSegmentation.html</guid><pubDate>Sun, 06 Jul 2025 10:07:28 +0000</pubDate></item><item><title>Mask2Former环境配置解决</title><link>https://yalungelin.github.io/post/Mask2Former-huan-jing-pei-zhi-jie-jue.html</link><description>第一步 GitHub上官方安装
贴一下链接[mask2former](https://github.com/facebookresearch/Mask2Former/blob/9b0651c6c1d5b3af2e6da0589b719c514ec0d69a/INSTALL.md)
要是设备（显卡）不是很新，可以先照着官方步骤进行安装。</description><guid isPermaLink="true">https://yalungelin.github.io/post/Mask2Former-huan-jing-pei-zhi-jie-jue.html</guid><pubDate>Sun, 06 Jul 2025 10:06:21 +0000</pubDate></item><item><title>解决CUDA环境问题</title><link>https://yalungelin.github.io/post/jie-jue-CUDA-huan-jing-wen-ti.html</link><description># 三种方式解决CUDA安装
# 1.CUDA, pip/conda pytorch
从系统的层面去安装CUDA工具包，然后用pip或者conda 安装pytorch
缺点:得更新CUDA版本，Nvidia的GPU没有版本兼容性
     得找相应的CUDA版本的包
# 2.Nvidia driver, conda pytorch
在本机上安装显卡驱动即可（一般本机都是有的，只需更新到最新），然后再通过conda来安装pytorch和CUDA
![](https://i-blog.csdnimg.cn/blog_migrate/27021ded86b3139b3c45f5de8234b9d6.png)
使用这个命令他会安装pytorch和对应的一个CUDA的工具包，系统只需要驱动即可
缺点：如果用CUDA的编辑器来做开发，其中是少了很多包的，需额外安装。</description><guid isPermaLink="true">https://yalungelin.github.io/post/jie-jue-CUDA-huan-jing-wen-ti.html</guid><pubDate>Sun, 06 Jul 2025 10:05:12 +0000</pubDate></item></channel></rss>
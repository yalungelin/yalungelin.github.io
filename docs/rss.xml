<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>瘦道西风,清穷白马</title><link>https://yalungelin.github.io</link><description>笔记</description><copyright>瘦道西风,清穷白马</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://iconic-api.onrender.com/dark/linux</url><title>avatar</title><link>https://yalungelin.github.io</link></image><lastBuildDate>Fri, 15 Aug 2025 07:23:54 +0000</lastBuildDate><managingEditor>瘦道西风,清穷白马</managingEditor><ttl>60</ttl><webMaster>瘦道西风,清穷白马</webMaster><item><title>深度学习中项目的安装方式</title><link>https://yalungelin.github.io/post/shen-du-xue-xi-zhong-xiang-mu-de-an-zhuang-fang-shi.html</link><description>在传统的深度学习中需要安装环境和源码来对数据集进行训练和改进。</description><guid isPermaLink="true">https://yalungelin.github.io/post/shen-du-xue-xi-zhong-xiang-mu-de-an-zhuang-fang-shi.html</guid><pubDate>Fri, 15 Aug 2025 07:23:25 +0000</pubDate></item><item><title>恶补Linux与docker命令</title><link>https://yalungelin.github.io/post/e-bu-Linux-yu-docker-ming-ling.html</link><description>一、Linux 常用命令

1. 系统信息

```bash
uname -a                # 查看系统内核和架构信息
cat /etc/os-release     # 查看系统版本
whoami                  # 查看当前用户
hostname                # 查看主机名
uptime                  # 查看系统运行时间和负载
```

2. 文件与目录管理

```bash
pwd                                 # 显示当前路径
ls -l                               # 列出文件详细信息
ls -a                               # 显示隐藏文件
cd &lt;目录&gt;                           # 切换目录
mkdir &lt;目录&gt;                        # 创建目录
rm -rf &lt;文件/目录&gt;                  # 删除文件或目录（危险）
cp file1 file2                      # 复制文件
mv old new                          # 重命名/移动文件
find /path -name '*.txt'            # 查找文件
tree                                # 树形结构查看目录（需安装）
```

3. 文件内容查看

```bash
cat file                # 查看文件内容
more file               # 分页查看文件
less file               # 上下翻页查看
head -n 10 file         # 查看前10行
tail -n 10 file         # 查看后10行
tail -f file            # 实时查看文件更新（日志常用）
```

4. 权限管理

```bash
ls -l                   # 查看文件权限
chmod 755 file          # 修改文件权限
chown user:group file   # 修改文件所属用户和组
sudo &lt;命令&gt;             # 以管理员权限执行
```

5. 网络

```bash
ifconfig / ip addr              # 查看网络信息
ping baidu.com                  # 测试网络连通性
curl http://example.com         # 访问网址
wget http://example.com/file    # 下载文件
scp file user@ip:/path          # 远程拷贝文件
ssh user@ip                     # 远程登录
ss -tulnp                       # 查看端口占用
```

6. 进程管理

```bash
ps aux                  # 查看进程
top                     # 实时查看进程
htop                    # 高级进程查看（需安装）
kill -9 PID             # 强制杀死进程
pkill &lt;进程名&gt;          # 按名称杀死进程
```

7. 压缩与解压

```bash
tar -czvf file.tar.gz dir/      # 打包压缩tar.gz
tar -xzvf file.tar.gz           # 解压tar.gz
zip -r file.zip dir/            # 压缩为zip
unzip file.zip                  # 解压zip
```
8. 按文件名查找

```bash
# 查找所有文件
find /path/to/search -type f

# 按文件名查找（精确匹配）
find /path/to/search -type f -name 'filename.txt'

# 按文件名查找（模糊匹配）
find /path/to/search -type f -name '*keyword*'

# 查找并用 grep 过滤
find /path/to/search -type f | grep 'keyword'
find /path/to/search -type f | grep -i 'keyword'   # 忽略大小写
```
 

二、Docker 常用命令

1. 镜像管理

```bash
docker pull 镜像名[:tag]     # 拉取镜像
docker images                # 查看本地镜像
docker rmi 镜像ID            # 删除镜像
docker build -t 名字:tag .   # 构建镜像（当前目录Dockerfile）
```

2. 容器管理（启动/停止/重启）

```bash
docker ps                        # 查看运行中容器
docker ps -a                     # 查看所有容器
docker run -it --name 名字 镜像名 /bin/bash   # 创建并进入容器
docker start 容器ID/名称         # 启动容器
docker stop 容器ID/名称          # 停止容器
docker restart 容器ID/名称       # 重启容器
docker pause 容器ID/名称         # 暂停容器
docker unpause 容器ID/名称       # 恢复容器
docker rm 容器ID                 # 删除容器
docker exec -it 容器ID /bin/bash # 进入运行中容器
docker logs -f 容器ID            # 查看容器日志
```
docker run -it --name 名字 镜像名 /bin/bash   # 创建并进入容器
/bin/bash 是 Linux 系统中 Bash Shell 的可执行路径

作用：启动容器后直接进入 Bash 交互环境，而不是让容器跑默认的 ENTRYPOINT 或 CMD

这样可以让你手动输入命令，就像登录到一台新的 Linux 机器
如：
```bash
docker run -it ubuntu /bin/bash
```
执行后你会进入一个 Ubuntu 容器的命令行：

```bash
root@a1b2c3d4e5:/#
```

3. 数据卷

```bash
docker volume ls                                 # 查看卷
docker volume create 卷名                        # 创建卷
docker run -v 卷名:/容器路径 镜像名              # 挂载卷
docker run -v /宿主路径:/容器路径 镜像名         # 挂载宿主机目录
```

4. 网络

```bash
docker network ls                               # 查看网络
docker network create --driver bridge 网络名    # 创建网络
docker run --network 网络名 镜像名              # 使用指定网络
```

5. 清理命令

```bash
docker system prune -f     # 清理无用数据
docker image prune -f      # 清理无用镜像
docker container prune -f  # 清理已停止容器
docker volume prune -f     # 清理无用卷
```
6. 管理 Docker 服务

```bash
# 启动 Docker 服务
sudo systemctl start docker

# 停止 Docker 服务
sudo systemctl stop docker

# 重启 Docker 服务
sudo systemctl restart docker

# 查看 Docker 服务状态
sudo systemctl status docker

# 设置开机自启 Docker
sudo systemctl enable docker

# 取消开机自启 Docker
sudo systemctl disable docker
```
。</description><guid isPermaLink="true">https://yalungelin.github.io/post/e-bu-Linux-yu-docker-ming-ling.html</guid><pubDate>Fri, 15 Aug 2025 01:28:33 +0000</pubDate></item><item><title>mmdetection-实例分割</title><link>https://yalungelin.github.io/post/mmdetection--shi-li-fen-ge.html</link><description>1.mmdetection环境安装

```c
conda create --name openmmlab python=3.8 -y
conda activate openmmlab
（ PyTorch 1.8+.）
conda install pytorch==2.2.2 torchvision==0.17.2 torchaudio==2.2.2 pytorch-cuda=11.8 -c pytorch -c nvidia
pip install -U openmim
mim install mmengine
mim install 'mmcv&gt;=2.0.0'
git clone https://github.com/open-mmlab/mmdetection.git
cd mmdetection
pip install -v -e .
```
验证是否成功：

```c
mim download mmdet --config rtmdet_tiny_8xb32-300e_coco --dest .
python demo/image_demo.py demo/demo.jpg rtmdet_tiny_8xb32-300e_coco.py --weights rtmdet_tiny_8xb32-300e_coco_20220902_112414-78e30dcc.pth --device cpu
```
您将在 ./outputs/vis 文件夹中看到一个新的图像 demo.jpg ，其中绘制了汽车、工作台等的边界框。</description><guid isPermaLink="true">https://yalungelin.github.io/post/mmdetection--shi-li-fen-ge.html</guid><pubDate>Tue, 12 Aug 2025 11:11:27 +0000</pubDate></item><item><title>conda、linux、电脑命令合集</title><link>https://yalungelin.github.io/post/conda%E3%80%81linux%E3%80%81-dian-nao-ming-ling-he-ji.html</link><description>**conda命令**
```c
conda list：查看环境中的所有包
conda install XXX：安装 XXX 包
conda remove XXX：删除XXX 包
conda env list：列出所有环境
conda create -n XXX python=3.XXX：创建名为 XXX 的环境 conda
create -n env_name jupyter notebook ：创建虚拟环境
activate XXX（或 source activate XXX）：启用/激活XXX环境
conda env remove -n XXX：删除指定XXX环境
deactivate（或source deactivate）：退出环境
conda env export &gt; xxx.yaml:导出环境
conda env create -f xxx.yaml:导入环境
jupyter notebook ：打开Jupyter Notebook
conda config --remove-key channels ：换回默认源
conda update --all：更新环境中的所有软件包
conda update conda：Conda中更新自己
conda update package_name1 package_name2 ...：更新环境中的某些软件包
conda install package_name=old_version：回退软件包版本
conda install pytorch torchvision torchaudio pytorch-cuda=11.7 -c pytorch -c nvidia
pip install -r requirements.txt  //安装依赖
conda list -e &gt; requirements.txt  //导出环境依赖
conda clean --all  这个命令会删除 Conda 包缓存、索引缓存、临时文件、未使用的包等，帮助释放空间。</description><guid isPermaLink="true">https://yalungelin.github.io/post/conda%E3%80%81linux%E3%80%81-dian-nao-ming-ling-he-ji.html</guid><pubDate>Fri, 08 Aug 2025 06:14:17 +0000</pubDate></item><item><title>WSL子系统问题集合（继续更新）</title><link>https://yalungelin.github.io/post/WSL-zi-xi-tong-wen-ti-ji-he-%EF%BC%88-ji-xu-geng-xin-%EF%BC%89.html</link><description>WSL安装
首先在启用或关闭wwindows功能中启用Linux虚拟化平台等等
![在这里插入图片描述](https://i-blog.csdnimg.cn/direct/660cfae3a173454f82be442c58df479d.png)
在微软商店中安装不同版本的Ubuntu，如果使用深度学习训练，建议使用20.04，别的版本会有显卡软连接问题，后续会提到。</description><guid isPermaLink="true">https://yalungelin.github.io/post/WSL-zi-xi-tong-wen-ti-ji-he-%EF%BC%88-ji-xu-geng-xin-%EF%BC%89.html</guid><pubDate>Sun, 06 Jul 2025 10:28:07 +0000</pubDate></item><item><title>打包PyQt5应用为exe文件</title><link>https://yalungelin.github.io/post/da-bao-PyQt5-ying-yong-wei-exe-wen-jian.html</link><description>安装必要的工具
首先，需要安装PyInstaller：

```c
pip install pyinstaller
```
打包应用程序
**基本打包方法**
打开命令提示符，导航到包含main.py文件的目录
执行打包命令：

```c
pyinstaller --name '工具' --windowed --icon=app_icon.ico main.py
```
参数解释：

--name - 指定生成的exe文件名称
--windowed - 创建没有控制台窗口的GUI应用
--icon - 应用程序图标
**高级打包方法（推荐）**
为了确保所有依赖关系都被正确打包，我建议创建一个规范文件：

 **1.首先生成规范文件：**
 

```c
pyi-makespec --name '工具' --windowed --icon=app_icon.ico main.py
```

 **2. 编辑生成的.spec文件，添加必要的数据文件（如果有样式文件等）：**

```c
# 在datas列表中添加所需的额外文件
a = Analysis(
    ['main.py'],
    pathex=[],
    binaries=[],
    datas=[('style.qss', '.')],  # 添加样式文件
    hiddenimports=[],
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=[],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=None,
    noarchive=False,
)
```
如果在当前环境下，直接运行第三个步骤，忽略第二步。</description><guid isPermaLink="true">https://yalungelin.github.io/post/da-bao-PyQt5-ying-yong-wei-exe-wen-jian.html</guid><pubDate>Sun, 06 Jul 2025 10:21:16 +0000</pubDate></item><item><title>常见服务器阵列（RAID方案）</title><link>https://yalungelin.github.io/post/chang-jian-fu-wu-qi-zhen-lie-%EF%BC%88RAID-fang-an-%EF%BC%89.html</link><description>阵列类型取决于你对以下几个方面的需求权重：

    数据安全性（容错能力）

    读写性能

    可用容量

    管理复杂度
一、常见RAID方案对比（基于4块4TB硬盘）
| RAID类型             | 可用容量 | 容错能力              | 性能       | 是否推荐          |
| ------------------ | ---- | ----------------- | -------- | ------------- |
| RAID 0             | 16TB | 无                 | 最高       | ❌ 不推荐（无容错）    |
| RAID 1+0 (RAID 10) | 8TB  | 可容忍1块每组的硬盘损坏（共2块） | 很好       | ✅ 推荐（性能+安全平衡） |
| RAID 5             | 12TB | 可容忍1块硬盘损坏         | 一般读好、写较慢 | ✅ 推荐（容量+安全折中） |
| RAID 6             | 8TB  | 可容忍2块硬盘损坏         | 写更慢，读好   | ✅ 推荐（极高安全性）   |

二、建议方案
推荐 1：RAID 10（RAID 1+0）

    优点：

        高读写性能。</description><guid isPermaLink="true">https://yalungelin.github.io/post/chang-jian-fu-wu-qi-zhen-lie-%EF%BC%88RAID-fang-an-%EF%BC%89.html</guid><pubDate>Sun, 06 Jul 2025 10:20:42 +0000</pubDate></item><item><title>遥感Tif标签文件处理</title><link>https://yalungelin.github.io/post/yao-gan-Tif-biao-qian-wen-jian-chu-li.html</link><description>### **标签文件模式**

查看文件模式

```bash
from PIL import Image
Image.MAX_IMAGE_PIXELS = None

img = Image.open(r'E:\tree\z1_labels_palette.tif')
print(img.mode)
```
img.mode 是 'RGB' 就是RGB图；

img.mode 是 'P' 就是调色板图；

img.mode 是 'L' 是灰度图。</description><guid isPermaLink="true">https://yalungelin.github.io/post/yao-gan-Tif-biao-qian-wen-jian-chu-li.html</guid><pubDate>Sun, 06 Jul 2025 10:20:08 +0000</pubDate></item><item><title>CloudCompare使用</title><link>https://yalungelin.github.io/post/CloudCompare-shi-yong.html</link><description>在 CloudCompare 中导出点云时，可以选择 二进制（Binary） 和 ASCII（纯文本） 两种格式，它们的主要区别如下：
1. 数据存储方式

    二进制格式：数据以二进制编码存储，占用空间较小，读写速度快，但不能直接用文本编辑器查看。</description><guid isPermaLink="true">https://yalungelin.github.io/post/CloudCompare-shi-yong.html</guid><pubDate>Sun, 06 Jul 2025 10:19:02 +0000</pubDate></item><item><title>镜像云备份（持续更新）</title><link>https://yalungelin.github.io/post/jing-xiang-yun-bei-fen-%EF%BC%88-chi-xu-geng-xin-%EF%BC%89.html</link><description>阿里：
pip install xxx -i https://mirrors.aliyun.com/pypi/simple
中科大：
pip install xxx -i https://pypi.mirrors.ustc.edu.cn/simple/
豆瓣源：
http://pypi.douban.com/simple/

当更新完.condarc文件时无效，可以查查是不是设置了全局的pip
全局pip一般地址：C:\Users\用户名\AppData\Roaming\pip。</description><guid isPermaLink="true">https://yalungelin.github.io/post/jing-xiang-yun-bei-fen-%EF%BC%88-chi-xu-geng-xin-%EF%BC%89.html</guid><pubDate>Sun, 06 Jul 2025 10:18:21 +0000</pubDate></item><item><title>nerfstudio遇到的问题</title><link>https://yalungelin.github.io/post/nerfstudio-yu-dao-de-wen-ti.html</link><description>![在这里插入图片描述](https://i-blog.csdnimg.cn/direct/28e624756ea94406a14326c0fab8a6c0.png)
sudo apt install ffmpeg
![在这里插入图片描述](https://i-blog.csdnimg.cn/direct/5dbf20bc94b0407aa6f7b3cd4fbbc8af.png)
sudo apt-get install colmap

nerfstudio训练自己的数据
[写的不错的博文](https://blog.csdn.net/Destiny_Di/article/details/136382803)

从只是使用的角度来说，分为三个部分：

1.数据处理
 

```bash
ns-process-data images --data /home/lsl/3Dseg/data/images/2 --output-dir /home/lsl/3Dseg/data/demorobo
```

 2.训练
 

```bash
 ns-train nerfacto --data /home/lsl/3Dseg/data/demorobo
```

  3.导出点云
  
这里导出的命令在可视化面板的可以直接生成，复制即可。</description><guid isPermaLink="true">https://yalungelin.github.io/post/nerfstudio-yu-dao-de-wen-ti.html</guid><pubDate>Sun, 06 Jul 2025 10:17:27 +0000</pubDate></item><item><title>使用ffmpeg对视频抽帧命令</title><link>https://yalungelin.github.io/post/shi-yong-ffmpeg-dui-shi-pin-chou-zheng-ming-ling.html</link><description>[ffmpeg安装教程](https://blog.csdn.net/csdn_yudong/article/details/129182648)
使用 `ffmpeg` 抽帧是个高效的方法，具体命令可以根据你的需求进行调整。</description><guid isPermaLink="true">https://yalungelin.github.io/post/shi-yong-ffmpeg-dui-shi-pin-chou-zheng-ming-ling.html</guid><pubDate>Sun, 06 Jul 2025 10:15:01 +0000</pubDate></item><item><title>Ubuntu 20.04 Nvidia驱动的安装（显卡V100）</title><link>https://yalungelin.github.io/post/Ubuntu%2020.04%20Nvidia-qu-dong-de-an-zhuang-%EF%BC%88-xian-qia-V100%EF%BC%89.html</link><description>


---

## **1. 检查 NVIDIA 内核模块是否加载**
运行：
```bash
lsmod | grep nvidia
```
如果没有输出，说明 **NVIDIA 内核模块未加载**，尝试手动加载：
```bash
sudo modprobe nvidia
nvidia-smi
```
如果 `modprobe` 报错，比如：
```
modprobe: ERROR: could not insert 'nvidia': No such device
```
说明 **驱动与内核不兼容**，请跳到 **步骤 3** 重新安装驱动。</description><guid isPermaLink="true">https://yalungelin.github.io/post/Ubuntu%2020.04%20Nvidia-qu-dong-de-an-zhuang-%EF%BC%88-xian-qia-V100%EF%BC%89.html</guid><pubDate>Sun, 06 Jul 2025 10:14:21 +0000</pubDate></item><item><title>yolov8 一般报错解决方案---持续更新</title><link>https://yalungelin.github.io/post/yolov8%20-yi-ban-bao-cuo-jie-jue-fang-an-----chi-xu-geng-xin.html</link><description>1.Segmentation fault (core dumped)
测试完，是因为pytorch版本对不上导致的问题。</description><guid isPermaLink="true">https://yalungelin.github.io/post/yolov8%20-yi-ban-bao-cuo-jie-jue-fang-an-----chi-xu-geng-xin.html</guid><pubDate>Sun, 06 Jul 2025 10:13:42 +0000</pubDate></item><item><title>Easy-GPU-PV一键安装hyper-v虚拟机</title><link>https://yalungelin.github.io/post/Easy-GPU-PV-yi-jian-an-zhuang-hyper-v-xu-ni-ji.html</link><description>一、hyper-v的开启
我的设备为Win 11 专业版（建议专业版）
家庭版升级专业版，[见此链接](https://github.com/massgravel/Microsoft-Activation-Scripts)
启用或关闭Windows功能
![在这里插入图片描述](https://i-blog.csdnimg.cn/direct/21d04179b51c4002a9b65a20f38d9e61.png)

![在这里插入图片描述](https://i-blog.csdnimg.cn/direct/86e6f0ba6027427eb3b5e11001b64968.png)
二、Easy-GPU-PV下载
下载文件包，[链接](https://github.com/jamesstringerparsec/Easy-GPU-PV)
三、使用
确保您的系统满足先决条件。</description><guid isPermaLink="true">https://yalungelin.github.io/post/Easy-GPU-PV-yi-jian-an-zhuang-hyper-v-xu-ni-ji.html</guid><pubDate>Sun, 06 Jul 2025 10:12:01 +0000</pubDate></item><item><title>Ubuntu 22.0安装MMSegmentation</title><link>https://yalungelin.github.io/post/Ubuntu%2022.0-an-zhuang-MMSegmentation.html</link><description>步骤 1. 创建一个 conda 环境，并激活

conda create --name openmmlab python=3.8 -y
conda activate openmmlab
步骤 2. 安装 PyTorch

安装低版本的pytorch，在继续安装MMSegmentation，才能避免报错。</description><guid isPermaLink="true">https://yalungelin.github.io/post/Ubuntu%2022.0-an-zhuang-MMSegmentation.html</guid><pubDate>Sun, 06 Jul 2025 10:07:28 +0000</pubDate></item><item><title>Mask2Former环境配置解决</title><link>https://yalungelin.github.io/post/Mask2Former-huan-jing-pei-zhi-jie-jue.html</link><description>第一步 GitHub上官方安装
贴一下链接[mask2former](https://github.com/facebookresearch/Mask2Former/blob/9b0651c6c1d5b3af2e6da0589b719c514ec0d69a/INSTALL.md)
要是设备（显卡）不是很新，可以先照着官方步骤进行安装。</description><guid isPermaLink="true">https://yalungelin.github.io/post/Mask2Former-huan-jing-pei-zhi-jie-jue.html</guid><pubDate>Sun, 06 Jul 2025 10:06:21 +0000</pubDate></item><item><title>解决CUDA环境问题</title><link>https://yalungelin.github.io/post/jie-jue-CUDA-huan-jing-wen-ti.html</link><description># 三种方式解决CUDA安装
# 1.CUDA, pip/conda pytorch
从系统的层面去安装CUDA工具包，然后用pip或者conda 安装pytorch
缺点:得更新CUDA版本，Nvidia的GPU没有版本兼容性
     得找相应的CUDA版本的包
# 2.Nvidia driver, conda pytorch
在本机上安装显卡驱动即可（一般本机都是有的，只需更新到最新），然后再通过conda来安装pytorch和CUDA
![](https://i-blog.csdnimg.cn/blog_migrate/27021ded86b3139b3c45f5de8234b9d6.png)
使用这个命令他会安装pytorch和对应的一个CUDA的工具包，系统只需要驱动即可
缺点：如果用CUDA的编辑器来做开发，其中是少了很多包的，需额外安装。</description><guid isPermaLink="true">https://yalungelin.github.io/post/jie-jue-CUDA-huan-jing-wen-ti.html</guid><pubDate>Sun, 06 Jul 2025 10:05:12 +0000</pubDate></item></channel></rss>